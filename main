#!/usr/bin/python3
import os
import json
import time
import secrets
from threading import Thread
from werkzeug.utils import secure_filename
from flask import Flask, render_template, request, url_for, flash, redirect, session, make_response, send_from_directory

print("Server started")
app = Flask(__name__)
app.config["SECRET_KEY"] = secrets.token_hex(256)
app.config["MAX_CONTENT_LENGTH"] = 8000 * 1000 * 1000
# this is 1 GB / 1000 MB
# 16 MB would be 16 * 1000 * 1000

HOST = "localhost"
PORT = "8080"
UPLOAD_FOLDER = "uploads"

def delay_delete(delay, filepath):
    time.sleep(delay)
    os.remove(filepath)

@app.route("/", methods=("GET", "POST"))
def home():
    if request.method == "POST":
        if "file" not in request.files:
            message = ("No file selected")
            return render_template("main.html", message=message)
        fileUpload = request.files["file"]
        randomCharacters = secrets.token_hex(12)
        fileUpload.save(os.path.join(UPLOAD_FOLDER, secure_filename(randomCharacters + "-" + fileUpload.filename)))

        t = Thread(target=delay_delete, args=(1800, os.path.join(UPLOAD_FOLDER, secure_filename(randomCharacters + "-" + fileUpload.filename))))
        t.start()

        message = (request.url + "uploads/" + secure_filename(randomCharacters + "-" +fileUpload.filename))
        return render_template("main.html", message=message, link=True)

    return render_template("main.html")

@app.route("/uploads/<name>")
def download(name):
    response = make_response(send_from_directory(UPLOAD_FOLDER, name))
    response.mimetype = "application/octet-stream"
    return response

if __name__ == "__main__":
    from waitress import serve 
    serve(app, host="localhost", port=8080)
    print("Server stopped")