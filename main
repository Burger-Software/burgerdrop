#!/usr/bin/python3
import os
import json
import time
import secrets
from threading import Thread
from werkzeug.utils import secure_filename
from flask import Flask, render_template, request, url_for, flash, redirect, session, make_response, send_from_directory

# change stuff here
MAX_FILE_SIZE = 8000  # in MB
HOST = "localhost"
PORT = 8080
UPLOAD_FOLDER = "uploads"


print("Server started")
app = Flask(__name__)
app.config["SECRET_KEY"] = secrets.token_hex(256)
app.config["MAX_CONTENT_LENGTH"] = MAX_FILE_SIZE * 1000 * 1000
# 16 MB would be 16 * 1000 * 1000


def DeleteDir(dir):
    if dir[-1] == os.sep:
        dir = dir[:-1]
    files = os.listdir(dir)
    for file in files:
        if file == '.' or file == '..':
            continue
        path = dir + os.sep + file
        if os.path.isdir(path):
            nukedir(path)
        else:
            os.unlink(path)
    os.rmdir(dir)


def ResetCache():
    DeleteDir("static/cache")
    os.mkdir("static/cache")


def delay_delete(delay, filepath):
    time.sleep(delay)
    os.remove(filepath)


@app.route("/", methods=("GET", "POST"))
def home():
    if request.method == "POST":
        if "file" not in request.files:
            message = ("No file selected")
            return render_template("main.html", message=message)
        fileUpload = request.files["file"]
        randomCharacters = secrets.token_hex(12)
        fileUpload.save(os.path.join(UPLOAD_FOLDER, secure_filename(
            randomCharacters + "-" + fileUpload.filename)))

        t = Thread(target=delay_delete, args=(1800, os.path.join(
            UPLOAD_FOLDER, secure_filename(randomCharacters + "-" + fileUpload.filename))))
        t.start()

        message = (request.url + "s/" +
                   secure_filename(randomCharacters + "-" + fileUpload.filename))
        return render_template("main.html", message=message, link=True)

    return render_template("main.html")


@app.route("/s/<name>")
def download(name):
    response = make_response(send_from_directory(UPLOAD_FOLDER, name))
    response.mimetype = "application/octet-stream"
    return response


if __name__ == "__main__":
    from waitress import serve
    ResetCache()
    serve(app, host=HOST, port=PORT)
    ResetCache()
    print("Server stopped")